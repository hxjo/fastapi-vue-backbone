[tool.poetry]
package-mode = false
name = "backbone"
version = "0.1.0"
description = ""
authors = ["Hugo Mortreux <70602545+hxjo@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
poethepoet = "^0.25.1"
python-dotenv = "^1.0.1"
fastapi = "^0.110.2"
uvicorn = {extras = ["standard"], version = "^0.29.0"}
sqlalchemy = "^2.0.29"
alembic = "^1.13.1"
bcrypt = "^4.1.2"
python-multipart = "^0.0.9"
python-jose = "^3.3.0"
sqladmin = "^0.16.1"
greenlet = "^3.0.3"
itsdangerous = "^2.2.0"
typer = {extras = ["all"], version = "^0.12.3"}
minio = "^7.2.5"
fastapi-storages = {extras = ["all"], version = "^0.3.0"}
sqlmodel = "^0.0.16"
pydantic-settings = "^2.2.1"
pydantic = {extras = ["email"], version = "^2.7.1"}
emails = "^0.6"
meilisearch = "^0.31.0"
openfga-sdk = "^0.4.2"
pytest-asyncio = "^0.23.6"
asyncpg = "^0.29.0"
ujson = "^5.9.0"
psycopg2-binary = "^2.9.9"
types-python-jose = "^3.3.4.20240106"
fastapi-inertia = "^0.1.2"


[tool.poetry.group.test.dependencies]
pytest-asyncio = "^0.23.6"
pytest = "^8.1.1"
pytest-xdist = "^3.5.0"
httpx = "^0.27.0"


[tool.poetry.group.lint.dependencies]
ruff = "^0.4.1"
mypy = "^1.10.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true
check_untyped_defs = true
ignore_missing_imports = true
exclude = [
    'conftest\.py$',
    '/tests/',
    '/test_utils/',
    'alembic/'
]

    [[tool.mypy.overrides]]
    module = ["app.*.api", "app.*.api_v1", "app.*.api_v2"]
    disable_error_code = ["no-untyped-def"]  # We don't specify return types for routes as we use response_model

    [[tool.mypy.overrides]]
    module = ["app.*.inertia_router"]
    disable_error_code = ["misc", "no-untyped-def"]  # Untyped decorator makes function "index" untyped + above

[tool.poe.tasks]
up_services = "python3 -m commands.docker up"

runall = "python3 -m commands.docker upall"

migration = { cmd = "alembic revision --autogenerate -m", help = "Create a new migration. Expects a message argument" }
migrate = "alembic upgrade head"
rollback = "alembic downgrade -1"
shell = "python3 -i -m commands.shell"

mypy = "mypy ."
ruff_lint_check = "ruff check ."

format = "ruff format ."
lint = "ruff check . --fix"
format_check = "ruff format . --check"
lint_check = ["mypy", "ruff_lint_check"]
ci_check = ["format_check", "lint_check"]
pc = ["format", "lint", "ci_check"]  # Pre-commit hook
git_add = "git add -A"
cm = ["format", "lint", "git_add"]

[tool.poe.tasks.run]
cmd = "python3 -m commands.run --host $host --port $port"


  [tool.poe.tasks.run.args.host]
  help = "The host to run the app on"
  default = "0.0.0.0"
  options = ["-h", "--host"]

  [tool.poe.tasks.run.args.port]
  help = "The port to run the app on"
  default = 8000
  options = ["-p", "--port"]

[tool.poe.tasks.runapp]
cmd = "uvicorn app.main:app --reload --host $host --port $port"

  [tool.poe.tasks.runapp.args.host]
  help = "The host to run the app on"
  default = "0.0.0.0"
  options = ["-h", "--host"]

  [tool.poe.tasks.runapp.args.port]
  help = "The port to run the app on"
  default = "8000"
  options = ["-p", "--port"]

[tool.poe.tasks.test]
cmd = "pytest -n $num_workers app/$target"

  [tool.poe.tasks.test.args.num_workers]
  help = "Number of workers to use for parallel testing"
  default = "auto"
  options = ["-n", "--num-workers"]


  [tool.poe.tasks.test.args.target]
  help = "The target to run tests on, from app/"
  positional = true
  default = ""

[tool.poe.tasks.cmd]
cmd = "python3 -m commands.$command $subcommand"
help = "Run a command. Pass --help for more information. Default command is main, the interactive menu"

  [tool.poe.tasks.cmd.args.command]
  help = "The command to run. Options are: main, docker, admin, data, search"
  positional = true
  default = "main"

  [tool.poe.tasks.cmd.args.subcommand]
  help = "The subcommand to run. Pass `-- --help` for more information"
  positional = true
  default = ""
